<ul class="a-IRR-pagination"><li class="a-IRR-pagination-item"><span class="a-IRR-pagination-label">                 176 -                  200</span></li><li class="a-IRR-pagination-item"><button type="button" class="a-Button a-IRR-button a-IRR-button--pagination" aria-controls="VALID_RECORDS" title="Previous" aria-label="Previous" data-pagination="pgR_min_row=151max_rows=25rows_fetched=25"><span class="a-Icon icon-left-chevron" aria-hidden="true"></span></button></li><li class="a-IRR-pagination-item"><button type="button" class="a-Button a-IRR-button a-IRR-button--pagination" aria-controls="VALID_RECORDS" title="Next" aria-label="Next" data-pagination="pgR_min_row=201max_rows=25rows_fetched=25"><span class="a-Icon icon-right-chevron" aria-hidden="true"></span></button></li></ul>









  





(function($){
  // Helper to tag IRs (kept from your setup)
  function tagIR(staticId, tag){
    $('#' + staticId + '_toolbar').addClass(tag + '-toolbar');
    $('#' + staticId + '_report').addClass(tag + '-report');
  }

  // On page load
  $(function(){
    tagIR('VALID_RECORDS','valid');
    tagIR('INVALID_RECORDS','invalid');

    // Initialize both reports
    setupJump('VALID_RECORDS');
    setupJump('INVALID_RECORDS');
  });

  // Injects jump control after pagination area
  function setupJump(staticId){
    // wait for IR to fully render
    setTimeout(function(){
      const $region = $('#' + staticId + '_report').closest('.a-IRR-region');
      if(!$region.length) return;

      // locate pagination (bottom)
      const $pagination = $region.find('.a-IRR-pagination');
      if(!$pagination.length) return;

      // prevent duplicates
      if($('#' + staticId + '_pageJumpWrap').length) return;

      // build the control
      const html = `
        <div id="${staticId}_pageJumpWrap" style="display:inline-flex;align-items:center;gap:6px;margin-left:10px;">
          <label style="font-weight:bold;font-size:13px;">Page:</label>
          <input type="number" id="${staticId}_pageInput" min="1" value="1"
                 style="width:60px;text-align:center;border-radius:5px;border:1px solid #ccc;padding:3px;">
          <button id="${staticId}_pageBtn" class="t-Button t-Button--small t-Button--primary">Go</button>
        </div>`;

      // append control near pagination label
      $pagination.append(html);

      // event handler for Go button
      $('#' + staticId + '_pageBtn').off('click').on('click', function(){
        goToPage(staticId);
      });

      // event handler for Enter key
      $('#' + staticId + '_pageInput').off('keypress').on('keypress', function(e){
        if(e.which === 13){
          e.preventDefault();
          goToPage(staticId);
        }
      });
    }, 800); // small delay to ensure pagination exists
  }

  // core logic for page jump
  function goToPage(staticId){
    const $region = $('#' + staticId + '_report').closest('.a-IRR-region');
    const $pagination = $region.find('.a-IRR-pagination');
    const labelText = $pagination.find('.a-IRR-pagination-label').text().trim();

    // extract visible range like "176 - 200"
    const match = labelText.match(/(\d+)\s*-\s*(\d+)/);
    if(!match) {
      apex.message.showErrors([{type:"error",message:"Pagination info not found"}]);
      return;
    }

    const min = parseInt(match[1],10);
    const max = parseInt(match[2],10);
    const rowsPerPage = max - min + 1;

    const pageNum = parseInt($('#' + staticId + '_pageInput').val(),10);
    if(isNaN(pageNum) || pageNum < 1){
      apex.message.showErrors([{type:"error",message:"Enter a valid page number"}]);
      return;
    }

    const newMinRow = (pageNum - 1) * rowsPerPage + 1;

    // Try the APEX pagination API
    try {
      const reg = apex.region(staticId);
      reg.widget().worksheet('paginate', { p_pg_min_row: newMinRow });
    } catch(e){
      console.warn('Fallback pagination logic in use', e);
      // fallback: click "Next" multiple times
      const $next = $pagination.find('button[title="Next"]');
      const $prev = $pagination.find('button[title="Previous"]');

      // Go back to first if necessary
      if(pageNum === 1 && $prev.length){
        while($prev.length) $prev.get(0).click();
        return;
      }

      // Simulate next clicks
      for(let i=1; i<pageNum; i++){
        $next.get(0).click();
      }
    }
  }
})(apex.jQuery);
