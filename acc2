DECLARE
    l_blob      BLOB;
    l_file_name VARCHAR2(255);
    l_err_msg   VARCHAR2(4000);
    l_job_id    NUMBER;
    l_seq_no    NUMBER := 0;
    l_success   BOOLEAN := TRUE;
    l_status    VARCHAR2(20);
BEGIN
    -- 1. Get latest uploaded file from APEX temp files
    SELECT blob_content, filename
      INTO l_blob, l_file_name
      FROM (
        SELECT blob_content, filename
          FROM apex_application_temp_files
         WHERE application_id = :APP_ID
         ORDER BY created_on DESC
      )
     WHERE ROWNUM = 1;

    -- 2. Generate JOB_ID from your sequence
    SELECT bulk_resolution_seq.NEXTVAL INTO l_job_id FROM dual;

    -- 3. Insert header record
    INSERT INTO eres_bulk_res_upload_smry (
        job_id, created_by, created_dt, job_status
    ) VALUES (
        l_job_id, :APP_USER, SYSDATE, 'PENDING'
    );

    -- 4. Loop through Excel rows
    FOR rec IN (
        SELECT col001 AS pts_res_group_id
          FROM TABLE(
            apex_data_parser.parse(
                p_content   => l_blob,
                p_file_name => l_file_name,
                p_skip_rows => 1
            )
          )
    )
    LOOP
        l_seq_no := l_seq_no + 1;

        BEGIN
            -- Always insert row, classify VALID vs INVALID
            IF REGEXP_LIKE(rec.pts_res_group_id, '^\d+$') THEN
                INSERT INTO eres_bulk_res_upload_detail (
                    job_id, seq_no, pts_res_group_id, row_status, status
                ) VALUES (
                    l_job_id, l_seq_no, rec.pts_res_group_id, 'VALID', NULL
                );
            ELSE
                INSERT INTO eres_bulk_res_upload_detail (
                    job_id, seq_no, pts_res_group_id, row_status, status
                ) VALUES (
                    l_job_id, l_seq_no, rec.pts_res_group_id, 'INVALID', NULL
                );
                l_success := FALSE; -- mark job as failed if any invalid
            END IF;

        EXCEPTION
            WHEN OTHERS THEN
                l_success := FALSE;
                l_err_msg := SQLERRM;
                DBMS_OUTPUT.PUT_LINE(
                    'Error inserting row '||l_seq_no||' : '||l_err_msg
                );
        END;
    END LOOP;

    -- 5. Cleanup temp file
    DELETE FROM apex_application_temp_files
     WHERE filename = l_file_name;

    -- 6. Update header status
    IF l_success THEN
        l_status := 'SCHEDULED';
    ELSE
        l_status := 'FAILED';
    END IF;

    UPDATE eres_bulk_res_upload_smry
       SET job_status = l_status
     WHERE job_id = l_job_id;

    COMMIT;

    -- 7. Optionally set JOB_ID in a page item
    :P21_JOB_ID := l_job_id;






SELECT 
    job_id,
    submission,
    date_added,
    status,
    user_added,

    CASE 
      WHEN status = 'SUCCESSFUL' THEN
        -- disabled button
        '<button class="t-Button t-Button--danger t-Button--small" disabled>Cancel</button>'
        WHEN status = 'CANCELLED' THEN
        -- disabled button
        '<button class="t-Button t-Button--danger t-Button--small" disabled>Cancel</button>'
        WHEN status = 'FAILED' THEN
        -- disabled button
        '<button class="t-Button t-Button--danger t-Button--small" disabled>Cancel</button>'


      ELSE
        -- active button
        '<button class="t-Button t-Button--danger t-Button--small cancel-row" '||
        'data-jobid="'||job_id||'">Cancel</button>'
    END AS cancel_button

FROM bulk_resolution_data
ORDER BY job_id DESC;

EXCEPTION
    WHEN OTHERS THEN
        l_err_msg := SQLERRM;
        DBMS_OUTPUT.PUT_LINE('Fatal error: '||l_err_msg);
        ROLLBACK;
END;






SELECT 
  br1.pts_res_group_id,
  MAX(pts.mer_num) AS mer_num,
  SUM(pts.us_currency_amt) AS us_currency_amt,
  MAX(pts.trn_dt) AS trn_dt,
  MAX(pts.susp_reas_cd) AS susp_reas_cd,
  MAX(pts.work_of_dt) AS work_of_dt,
  MAX(pts.case_status_id) AS case_status_id,
  DECODE(MAX(pts.case_status_id), 20, 'Already Closed', 'Scheduled') AS status
FROM apex_mod.bulk_resolution_data1 br1
JOIN eresuser_owner.pts_case pts
  ON br1.pts_res_group_id = pts.pts_res_group_id
WHERE br1.job_id = :JOB_ID
GROUP BY br1.pts_res_group_id
ORDER BY MAX(pts.work_of_dt) DESC;
