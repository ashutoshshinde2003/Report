SELECT *
FROM TABLE(
    apex_data_parser.parse(
        p_content   => (SELECT blob_content
                        FROM apex_application_temp_files
                        WHERE name = :P1_FILE),  -- uploaded file
        p_file_name => (SELECT filename
                        FROM apex_application_temp_files
                        WHERE name = :P1_FILE),
        p_skip_rows => 1  -- skip header row if needed
    )
)



SELECT name, filename, created_on 
FROM apex_application_temp_files
ORDER BY created_on DESC;


SELECT
    col001 AS job_id,
    col002 AS submission,
    TO_DATE(col003, 'DD/MM/YYYY') AS date_added,
    col004 AS status,
    col005 AS user_added
FROM TABLE(
    apex_data_parser.parse(
        p_content   => (SELECT blob_content
                        FROM apex_application_temp_files
                        WHERE name = :P1_FILE),
        p_file_name => (SELECT filename
                        FROM apex_application_temp_files
                        WHERE name = :P1_FILE),
        p_skip_rows => 1
    )
)



DECLARE
    l_blob      BLOB;
    l_filename  VARCHAR2(255);
BEGIN
    SELECT blob_content, filename
    INTO   l_blob, l_filename
    FROM apex_application_temp_files
    WHERE name = :P1_FILE_UPLOAD;

    FOR rec IN (
        SELECT *
        FROM TABLE(
            apex_data_parser.parse(
                p_content   => l_blob,
                p_file_name => l_filename,
                p_skip_rows => 1
            )
        )
    )
    LOOP
        INSERT INTO my_temp_table (
            job_id,
            submission,
            date_added,
            status,
            user_added
        )
        VALUES (
            rec.col001,
            rec.col002,
            rec.col003,
            rec.col004,
            rec.col005
        );
    END LOOP;
END;







declare
    l_blob    blob;
    l_data    apex_data_parser.t_values;        -- Holds all rows
    l_row     apex_data_parser.t_column_values; -- Holds one row's columns
begin
    -- Get the uploaded Excel BLOB
    select blob_content
    into l_blob
    from apex_application_temp_files
    where name = :P1_FILE_UPLOAD_FILENAME;

    -- Delete previous collection
    if apex_collection.collection_exists('EXCEL_PREVIEW') then
        apex_collection.delete_collection('EXCEL_PREVIEW');
    end if;

    apex_collection.create_collection('EXCEL_PREVIEW');

    -- Parse Excel
    l_data := apex_data_parser.parse(
                  p_content   => l_blob,
                  p_file_name => :P1_FILE_UPLOAD_FILENAME
              );

    -- Loop through each row
    for i in 1 .. l_data.count loop
        l_row := l_data(i).column_values;  -- Get one row

        apex_collection.add_member(
            p_collection_name => 'EXCEL_PREVIEW',
            p_c001 => l_row(1),  -- Column 1
            p_c002 => l_row(2),  -- Column 2
            p_c003 => l_row(3),  -- Column 3
            p_c004 => l_row(4),  -- Column 4
            p_c005 => l_row(5)   -- Column 5
        );
    end loop;
end;





































DECLARE
    l_blob      BLOB;
    l_file_name VARCHAR2(255);
    l_err_msg   VARCHAR2(4000);
    l_job_id    NUMBER;
BEGIN
    -- get latest uploaded file
    SELECT blob_content, filename
    INTO l_blob, l_file_name
    FROM (
        SELECT blob_content, filename
        FROM apex_application_temp_files
        WHERE application_id = :APP_ID
        ORDER BY created_on DESC
    )
    WHERE ROWNUM = 1;

    -- Generate a single JOB_ID for this load
    SELECT bulk_resolution_seq.NEXTVAL INTO l_job_id FROM dual;

    -- parse Excel file (one column only)
    FOR rec IN (
        SELECT col001 AS pts_res_group_id
        FROM TABLE(
            apex_data_parser.parse(
                p_content   => l_blob,
                p_file_name => l_file_name,
                p_skip_rows => 1  -- skip header row
            )
        )
    )
    LOOP
        BEGIN
            -- skip blank rows
            IF rec.pts_res_group_id IS NULL THEN
                CONTINUE;
            END IF;

            -- insert into your detail table
            INSERT INTO bulk_resolution_data1 (
                pts_res_group_id,
                job_id
            ) VALUES (
                rec.pts_res_group_id,
                l_job_id       -- same job_id for all rows
            );

        EXCEPTION
            WHEN OTHERS THEN
                l_err_msg := SQLERRM;
                DBMS_OUTPUT.PUT_LINE(
                    'Error inserting row PTS_RES_GROUP_ID='||rec.pts_res_group_id||
                    ' : '||l_err_msg
                );
        END;
    END LOOP;

    -- cleanup temp file
    DELETE FROM apex_application_temp_files
    WHERE filename = l_file_name;

    -- insert header log into BULK_RESOLUTION_DATA (optional)
    INSERT INTO bulk_resolution_data (
        job_id, submission, date_added, status, user_added
    ) VALUES (
        l_job_id,
        100,
        SYSDATE,
        'SUCCESSFUL',
        :APP_USER
    );

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        l_err_msg := SQLERRM;
        DBMS_OUTPUT.PUT_LINE('Fatal error: '||l_err_msg);

        -- still record header failure
        INSERT INTO bulk_resolution_data (
            job_id, submission, date_added, status, user_added
        ) VALUES (
            NVL(l_job_id, bulk_resolution_seq.NEXTVAL),
            100,
            SYSDATE,
            'FAILED',
            :APP_USER
        );

        ROLLBACK;
END;
/














DECLARE
    l_blob      BLOB;
    l_file_name VARCHAR2(255);
    l_err_msg   VARCHAR2(4000);
    l_job_id    NUMBER;
    l_success   BOOLEAN := TRUE;         -- assume OK until a row fails
    l_status    VARCHAR2(20);            -- will hold SUCCESSFUL / FAILED
BEGIN
    -- get latest uploaded file
    SELECT blob_content, filename
    INTO l_blob, l_file_name
    FROM (
        SELECT blob_content, filename
        FROM apex_application_temp_files
        WHERE application_id = :APP_ID
        ORDER BY created_on DESC
    )
    WHERE ROWNUM = 1;

    -- Generate one JOB_ID for this batch
    SELECT bulk_resolution_seq.NEXTVAL INTO l_job_id FROM dual;

    -- parse Excel file (one column only)
    FOR rec IN (
        SELECT col001 AS pts_res_group_id
        FROM TABLE(
            apex_data_parser.parse(
                p_content   => l_blob,
                p_file_name => l_file_name,
                p_skip_rows => 1  -- skip header row
            )
        )
    )
    LOOP
        BEGIN
            -- check blank row
            IF rec.pts_res_group_id IS NULL THEN
                l_success := FALSE;  -- mark batch as failed
                DBMS_OUTPUT.PUT_LINE('Error: PTS_RES_GROUP_ID cannot be null.');
                CONTINUE;
            END IF;

            -- try insert
            INSERT INTO bulk_resolution_data1 (
                pts_res_group_id,
                job_id
            ) VALUES (
                rec.pts_res_group_id,
                l_job_id
            );

        EXCEPTION
            WHEN DUP_VAL_ON_INDEX THEN  -- duplicate primary key
                l_success := FALSE;
                DBMS_OUTPUT.PUT_LINE(
                    'Duplicate PTS_RES_GROUP_ID='||rec.pts_res_group_id
                );
            WHEN OTHERS THEN
                l_success := FALSE;
                l_err_msg := SQLERRM;
                DBMS_OUTPUT.PUT_LINE(
                    'Error inserting PTS_RES_GROUP_ID='||rec.pts_res_group_id||
                    ' : '||l_err_msg
                );
        END;
    END LOOP;

    -- cleanup temp file
    DELETE FROM apex_application_temp_files
    WHERE filename = l_file_name;

    -- decide header status
    IF l_success THEN
        l_status := 'SUCCESSFUL';
    ELSE
        l_status := 'FAILED';
    END IF;

    -- insert header log record
    INSERT INTO bulk_resolution_data (
        job_id, submission, date_added, status, user_added
    ) VALUES (
        l_job_id,
        100,
        SYSDATE,
        l_status,
        :APP_USER
    );

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        l_err_msg := SQLERRM;
        DBMS_OUTPUT.PUT_LINE('Fatal error: '||l_err_msg);

        -- still record header failure
        INSERT INTO bulk_resolution_data (
            job_id, submission, date_added, status, user_added
        ) VALUES (
            NVL(l_job_id, bulk_resolution_seq.NEXTVAL),
            100,
            SYSDATE,
            'FAILED',
            :APP_USER
        );

        ROLLBACK;
END;
/
















DECLARE
    l_latest_job_id  bulk_resolution_data.job_id%TYPE;
BEGIN
    -- Find the latest job_id (highest value)
    SELECT MAX(job_id)
    INTO l_latest_job_id
    FROM bulk_resolution_data;

    -- Update FLAGB1 to 'Y' for that job_id
    UPDATE bulk_resolution_data
    SET flagb1 = 'Y'
    WHERE job_id = l_latest_job_id;

    COMMIT;

    -- Optional: output a message for debugging
    DBMS_OUTPUT.PUT_LINE('FLAGB1 updated to Y for JOB_ID=' || l_latest_job_id);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No job_id found in bulk_resolution_data.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        ROLLBACK;
END;
/