DECLARE
    l_blob        BLOB;
    l_file_name   VARCHAR2(255);
    l_err_msg     VARCHAR2(4000);
    l_job_id      NUMBER;
    l_seq_no      NUMBER := 0;
    l_success     BOOLEAN := TRUE;
    l_status      VARCHAR2(20);
    l_row_count   NUMBER := 0;
    l_actual_rows NUMBER := 0;
    l_clob        CLOB;
BEGIN
    -- 1. Get latest uploaded file
    SELECT blob_content, filename
      INTO l_blob, l_file_name
      FROM (
          SELECT blob_content, filename
            FROM apex_application_temp_files
           WHERE application_id = :APP_ID
           ORDER BY created_on DESC
      )
     WHERE ROWNUM = 1;

    -- 2. Generate job_id
    SELECT bulk_resolution_seq.NEXTVAL INTO l_job_id FROM dual;

    -- 3. Insert header record
    INSERT INTO eres_bulk_res_upload_smry (
        job_id, created_by, created_dt, job_status
    ) VALUES (
        l_job_id, :APP_USER, SYSDATE, 'PENDING'
    );

    -- ✅ 3a. Detect total rows (including blank ones)
    BEGIN
        l_clob := UTL_RAW.cast_to_varchar2(DBMS_LOB.substr(l_blob, 32767, 1));
        l_actual_rows := REGEXP_COUNT(l_clob, CHR(10)) + 1;
    EXCEPTION
        WHEN OTHERS THEN
            l_actual_rows := 0;
    END;

    -- 4. Parse actual rows (non-blank only)
    FOR rec IN (
        SELECT col001 AS pts_res_group_id
          FROM TABLE(
              apex_data_parser.parse(
                  p_content   => l_blob,
                  p_file_name => l_file_name,
                  p_skip_rows => 1,
                  p_nullif    => ' '
              )
          )
    )
    LOOP
        l_seq_no := l_seq_no + 1;
        l_row_count := l_row_count + 1;

        BEGIN
            IF rec.pts_res_group_id IS NULL OR TRIM(rec.pts_res_group_id) IS NULL THEN
                INSERT INTO eres_bulk_res_upload_detail (
                    job_id, seq_no, pts_res_group_id, row_status, status
                ) VALUES (
                    l_job_id, l_seq_no, rec.pts_res_group_id, 'INVALID', 'Blank / Missing value'
                );
                l_success := FALSE;
            ELSIF REGEXP_LIKE(rec.pts_res_group_id, '^\d+$') THEN
                INSERT INTO eres_bulk_res_upload_detail (
                    job_id, seq_no, pts_res_group_id, row_status, status
                ) VALUES (
                    l_job_id, l_seq_no, rec.pts_res_group_id, 'VALID', NULL
                );
            ELSE
                INSERT INTO eres_bulk_res_upload_detail (
                    job_id, seq_no, pts_res_group_id, row_status, status
                ) VALUES (
                    l_job_id, l_seq_no, rec.pts_res_group_id, 'INVALID', 'Non-numeric / bad format'
                );
                l_success := FALSE;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                l_success := FALSE;
                l_err_msg := SQLERRM;
                DBMS_OUTPUT.PUT_LINE('Error inserting row '||l_seq_no||' : '||l_err_msg);
        END;
    END LOOP;

    -- 5. Delete temp file
    DELETE FROM apex_application_temp_files
     WHERE filename = l_file_name;

    -- 6. Update summary
    IF l_success THEN
        l_status := 'SCHEDULED';
    ELSE
        l_status := 'SCHEDULED';
    END IF;

    UPDATE eres_bulk_res_upload_smry
       SET job_status = l_status
     WHERE job_id = l_job_id;

    COMMIT;

    -- 7. Pass info to APEX
    :P21_NEW_1_JOBID := l_job_id;
    :JOB_ID := :P21_NEW_1_JOBID;

    -- ✅ Show both totals (actual vs parsed)
    :TOTAL_ROW_COUNT := l_row_count;
    :TOTAL_COUNT := CASE 
                      WHEN l_actual_rows > 0 
                      THEN l_actual_rows 
                      ELSE l_row_count 
                    END;

    DBMS_OUTPUT.PUT_LINE('Parsed rows: ' || l_row_count || ', Total (including blanks): ' || :TOTAL_COUNT);

EXCEPTION
    WHEN OTHERS THEN
        l_err_msg := SQLERRM;
        DBMS_OUTPUT.PUT_LINE('Fatal error: ' || l_err_msg);
        ROLLBACK;
END;
/