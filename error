CREATE OR REPLACE PROCEDURE ERESUSER_OWNER.AUTO_DNP
IS
    /*********************************************************************************
    2.0   Ashutosh - Final version for scheduled execution
          ✅ Safe handling of VARCHAR pts_res_group_id
          ✅ Skips junk/non-numeric entries silently
          ✅ No JOB_ID dependency
          ✅ No logging table
          ✅ All original functionality preserved
    *********************************************************************************/

    cnt NUMBER := 0;

    -- Cursor: Select only valid numeric pts_res_group_id entries that are not already closed
    CURSOR c1 IS
        SELECT DISTINCT TO_NUMBER(brd.pts_res_group_id) AS pts_res_group_id,
                        pc.queue_id
          FROM apex_mod.eres_bulk_res_upload_detail brd
          JOIN eresuser_owner.pts_case pc
            ON TO_NUMBER(brd.pts_res_group_id) = pc.pts_res_group_id
         WHERE REGEXP_LIKE(brd.pts_res_group_id, '^\d+$')   -- process only numeric IDs
           AND pc.case_status_id NOT IN (20);               -- skip already closed

BEGIN
    DBMS_OUTPUT.PUT_LINE('AUTO_DNP started at: ' || TO_CHAR(SYSDATE, 'DD-MON-YYYY HH24:MI:SS'));

    --------------------------------------------------------------------
    -- Main Loop: identical functionality, with safety
    --------------------------------------------------------------------
    FOR i IN c1 LOOP
        BEGIN
            cnt := cnt + 1;

            -- Update batch resolution
            UPDATE eresuser_owner.pts_batch_resolution
               SET action_id       = 1179,
                   susp_comment_id = 8,
                   res_dt          = TRUNC(SYSDATE),
                   user_name       = 'SYSTEM',
                   pts_grp_note    = 'Auto-DNP Bulk Resolution performed'
             WHERE pts_res_group_id = i.pts_res_group_id;

            -- Update case table
            UPDATE eresuser_owner.pts_case
               SET case_status_id = 20,
                   closed_dt      = TRUNC(SYSDATE)
             WHERE pts_res_group_id = i.pts_res_group_id;

            -- Insert into batch action
            INSERT INTO eresuser_owner.pts_batch_action (
                case_action_id,
                pts_res_group_id,
                action_id,
                created_dt,
                user_comment,
                user_name,
                prior_queue_id
            ) VALUES (
                seq_pts_case_action_id.NEXTVAL,
                i.pts_res_group_id,
                1179,
                SYSDATE,
                'Auto-DNP Bulk Resolution performed',
                'SYSTEM',
                i.queue_id
            );

            -- Commit every 1000 records (unchanged)
            IF cnt = 1000 THEN
                COMMIT;
                cnt := 0;
            END IF;

        EXCEPTION
            WHEN OTHERS THEN
                -- Skip junk, invalid, or problematic records silently
                DBMS_OUTPUT.PUT_LINE('Skipped invalid entry: ' || SQLERRM);
                CONTINUE;
        END;
    END LOOP;

    --------------------------------------------------------------------
    -- Mark all scheduled jobs as successful after completion
    --------------------------------------------------------------------
    UPDATE apex_mod.eres_bulk_res_upload_smry
       SET job_status = 'SUCCESSFUL',
           created_dt = SYSDATE
     WHERE job_status = 'SCHEDULED';

    COMMIT;

    DBMS_OUTPUT.PUT_LINE('AUTO_DNP completed successfully at: ' || TO_CHAR(SYSDATE, 'DD-MON-YYYY HH24:MI:SS'));

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('FATAL ERROR: ' || SQLERRM);
        ROLLBACK;
END;





























<div style ="text-align:left;
            font-size:24px;
            font-weight:bold;
            margin-bottom:20px;
            color:#333;">
            JOB ID: &P24_JOB_ID.</div>



<div style="display:flex; gap:20px; align-items:center; justify-content:center;">
  <div style="
       background-color:#4CAF50;
       color:white;
       padding:20px;
       border-radius:30px;
       font-size:20px;
       min-width:175px;
       text-align:center;">
     Processed Successfully  
    <div style="font-size:40px; font-weight:bold;">&P24_NEW_GOOD.</div>
  </div>

  <div style="
       background-color:#FFAC1C;
       color:white;
       padding:20px;
       border-radius:30px;
       font-size:20px;
       min-width:175px;
       text-align:center;">
     Unable to Process
    <div style="font-size:40px; font-weight:bold;">&P24_NEW_BAD.</div>
  </div>


    <div style="
       background-color:#F44336;
       color:white;
       padding:20px;
       border-radius:30px;
       font-size:20px;
       min-width:175px;
       text-align:center;">
     Duplicate Records
    <div style="font-size:40px; font-weight:bold;">&P24_NEW_DUP_COMP.</div>
  </div>
  
    <div style="
       background-color:#F44336;
       color:white;
       padding:20px;
       border-radius:30px;
       font-size:20px;
       min-width:175px;
       text-align:center;">
     Invalid Records
    <div style="font-size:40px; font-weight:bold;">&P24_NEW_INVALID.</div>
  </div>


</div>




/











// Utility function to style each card dynamically
function styleCard(itemName, boxSelector, baseColor) {
  var val = Number($v(itemName));
  var box = $(boxSelector);

  if (isNaN(val)) return; // skip invalid values

  // Default card style
  box.css({
    "color": "white",
    "background-color": baseColor,
    "border-radius": "30px",
    "padding": "20px",
    "font-size": "20px",
    "min-width": "175px",
    "text-align": "center",
    "transition": "transform 0.2s ease, box-shadow 0.2s ease"
  });

  // Optional: hide if 0
  if (val === 0) {
    box.css({
      "opacity": "0.4",
      "background-color": "#bbb"
    });
  }

  // Smooth animation
  box.hover(
    function () { $(this).css({ "transform": "scale(1.05)", "box-shadow": "0 8px 20px rgba(0,0,0,0.15)" }); },
    function () { $(this).css({ "transform": "scale(1.0)", "box-shadow": "none" }); }
  );
}

// Run after page load and item values available
$(document).ready(function() {
  // Good records → green
  styleCard("P24_NEW_GOOD", "div:contains('Processed Successfully')", "#4CAF50");
  
  // Bad records → orange
  styleCard("P24_NEW_BAD", "div:contains('Unable to Process')", "#FFAC1C");
  
  // Duplicate records → purple
  styleCard("P24_NEW_DUPLICATE", "div:contains('Duplicate Records')", "#9C27B0");
  
  // Invalid records → red
  styleCard("P24_NEW_INVALID", "div:contains('Invalid Records')", "#F44336");
});






SELECT COUNT(*) as cnt
from apex_mod.eres_bulk_res_upload_detail
where job_id = :P24_JOB_ID
AND row_status = 'VALID';





SELECT COUNT(DISTINCT pts_res_group_id) as cnt
from apex_mod.eres_bulk_res_upload_detail
where job_id = :P24_JOB_ID
AND row_status = 'VALID';
