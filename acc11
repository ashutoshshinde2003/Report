DECLARE
    l_blob      BLOB;
    l_file_name VARCHAR2(255);
    l_err_msg   VARCHAR2(4000);
    l_job_id    NUMBER;
    l_success   BOOLEAN := TRUE;
    l_status    VARCHAR2(20);
BEGIN
    -- Get latest uploaded file
    SELECT blob_content, filename
    INTO l_blob, l_file_name
    FROM (
        SELECT blob_content, filename
        FROM apex_application_temp_files
        WHERE application_id = :APP_ID
        ORDER BY created_on DESC
    )
    WHERE ROWNUM = 1;

    -- Generate one JOB_ID for this batch
    SELECT bulk_resolution_seq.NEXTVAL INTO l_job_id FROM dual;

    -- Parse Excel file (one column only)
    FOR rec IN (
        SELECT col001 AS pts_res_group_id
        FROM TABLE(
            apex_data_parser.parse(
                p_content   => l_blob,
                p_file_name => l_file_name,
                p_skip_rows => 1  -- skip header row
            )
        )
    )
    LOOP
        BEGIN
            -- Insert directly even if NULL or alphanumeric
            INSERT INTO bulk_resolution_data1 (
                pts_res_group_id,
                job_id
            ) VALUES (
                rec.pts_res_group_id,
                l_job_id
            );

        EXCEPTION
            WHEN DUP_VAL_ON_INDEX THEN
                l_success := FALSE;
                DBMS_OUTPUT.PUT_LINE(
                    'Duplicate PTS_RES_GROUP_ID='||rec.pts_res_group_id
                );
            WHEN OTHERS THEN
                l_success := FALSE;
                l_err_msg := SQLERRM;
                DBMS_OUTPUT.PUT_LINE(
                    'Error inserting PTS_RES_GROUP_ID='||rec.pts_res_group_id||
                    ' : '||l_err_msg
                );
        END;
    END LOOP;

    -- Cleanup temp file
    DELETE FROM apex_application_temp_files
    WHERE filename = l_file_name;

    -- Decide header status
    IF l_success THEN
        l_status := 'SCHEDULED';
        :P5_NEW_2 := 'Y';
        :P5_NEW_1 := l_job_id;
        :JOB_ID := :P5_NEW_1;
        :USER_PREVIEW := :P5_NEW_2;
    ELSE
        l_status := 'FAILED';
        :P5_NEW_2 := 'N';
        :USER_PREVIEW := 'N';
    END IF;

    -- Insert header log record
    INSERT INTO bulk_resolution_data (
        job_id, submission, date_added, status, user_added, FLAGB1, JOB_STATUS
    ) VALUES (
        l_job_id,
        100,
        SYSDATE,
        l_status,
        :APP_USER,
        'N',
        'PENDING'
    );

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        l_err_msg := SQLERRM;
        DBMS_OUTPUT.PUT_LINE('Fatal error: '||l_err_msg);

        -- Still record header failure
        INSERT INTO bulk_resolution_data (
            job_id, submission, date_added, status, user_added, FLAGB1, JOB_STATUS
        ) VALUES (
            NVL(l_job_id, bulk_resolution_seq.NEXTVAL),
            100,
            SYSDATE,
            'FAILED',
            :APP_USER,
            'N',
            'PENDING'
        );

        ROLLBACK;
END;




















SELECT 
  br1.pts_res_group_id,
  MAX(pts.mer_num) AS mer_num,
  SUM(pts.us_currency_amt) AS us_currency_amt,
  MAX(pts.trn_dt) AS trn_dt,
  MAX(pts.susp_reas_cd) AS susp_reas_cd,
  MAX(pts.work_of_dt) AS work_of_dt,
  MAX(pts.case_status_id) AS case_status_id,
  DECODE(MAX(pts.case_status_id), 20, 'Already Closed', 'Scheduled') AS status
FROM apex_mod.bulk_resolution_data1 br1
JOIN eresuser_owner.pts_case pts
  ON br1.pts_res_group_id = pts.pts_res_group_id
WHERE br1.job_id = :JOB_ID
  AND REGEXP_LIKE(br1.pts_res_group_id, '^[0-9]+$')
GROUP BY br1.pts_res_group_id
ORDER BY MAX(pts.work_of_dt) DESC;






SELECT 
  br1.pts_res_group_id,
  MAX(pts.mer_num) AS mer_num,
  SUM(pts.us_currency_amt) AS us_currency_amt,
  MAX(pts.trn_dt) AS trn_dt,
  MAX(pts.susp_reas_cd) AS susp_reas_cd,
  MAX(pts.work_of_dt) AS work_of_dt,
  MAX(pts.case_status_id) AS case_status_id,
  /* ðŸ‘‡ status column extended */
  CASE
    WHEN br1.pts_res_group_id IS NULL 
         OR NOT REGEXP_LIKE(br1.pts_res_group_id,'^[0-9]+$')
         OR pts.pts_res_group_id IS NULL
    THEN 'Invalid'
    WHEN MAX(pts.case_status_id) = 20 THEN 'Already Closed'
    ELSE 'Scheduled'
  END AS status
FROM apex_mod.bulk_resolution_data1 br1
LEFT JOIN eresuser_owner.pts_case pts
  ON br1.pts_res_group_id = pts.pts_res_group_id
WHERE br1.job_id = :JOB_ID
  AND (br1.pts_res_group_id IS NULL 
       OR NOT REGEXP_LIKE(br1.pts_res_group_id, '^[0-9]+$')
       OR pts.pts_res_group_id IS NULL)
GROUP BY br1.pts_res_group_id
ORDER BY MAX(pts.work_of_dt) DESC;
