DECLARE
    l_blob      BLOB;
    l_file_name VARCHAR2(255);
    l_success   BOOLEAN := TRUE;
    l_err_msg   VARCHAR2(4000);
BEGIN
    -- get latest uploaded file
    SELECT blob_content, filename
    INTO l_blob, l_file_name
    FROM (
        SELECT blob_content, filename
        FROM apex_application_temp_files
        WHERE application_id = :APP_ID
        ORDER BY created_on DESC
    )
    WHERE ROWNUM = 1;

    -- parse Excel using headers
    FOR rec IN (
        SELECT *
        FROM TABLE(
            apex_data_parser.parse(
                p_content        => l_blob,
                p_file_name      => l_file_name,
                p_skip_rows      => 1,
                p_add_headers_row => 'Y'  -- map by header names
            )
        )
    )
    LOOP
        BEGIN
            -- Insert into target table
            INSERT INTO bulk_resolution_data1 (
                case_id,
                job_id,
                status,
                case_status,
                pts_res_group_id
            ) VALUES (
                rec.case_id,
                rec.job_id,
                rec.status,
                rec.case_status,
                NVL(rec.pts_res_group_id, 0)   -- default if missing
            );
        EXCEPTION
            WHEN OTHERS THEN
                l_success := FALSE;
                l_err_msg := SQLERRM;
                DBMS_OUTPUT.PUT_LINE(
                    'Error inserting row with CASE_ID=' || rec.case_id || ' : ' || l_err_msg
                );
        END;
    END LOOP;

    -- cleanup temp file
    DELETE FROM apex_application_temp_files
    WHERE filename = l_file_name;

    -- Insert header log
    IF l_success THEN
        INSERT INTO bulk_resolution_data (
            job_id, submission, date_added, status, user_added
        ) VALUES (
            bulk_resolution_seq.NEXTVAL,
            100,
            SYSDATE,
            'SUCCESSFUL',
            :APP_USER
        );
    ELSE
        INSERT INTO bulk_resolution_data (
            job_id, submission, date_added, status, user_added
        ) VALUES (
            bulk_resolution_seq.NEXTVAL,
            100,
            SYSDATE,
            'FAILED',
            :APP_USER
        );
    END IF;

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        l_err_msg := SQLERRM;
        DBMS_OUTPUT.PUT_LINE('Fatal error: ' || l_err_msg);

        INSERT INTO bulk_resolution_data (
            job_id, submission, date_added, status, user_added
        ) VALUES (
            bulk_resolution_seq.NEXTVAL,
            100,
            SYSDATE,
            'FAILED',
            :APP_USER
        );

        ROLLBACK;
END;